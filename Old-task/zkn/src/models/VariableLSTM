import torch
import torch.nn as nn
from typing import Tuple

class VariableLSTM(nn.Module):
    """Variable-depth LSTM implementation.
    
    Args:
        nlayer: Number of LSTM layers
        input_size: Input dimension
        hidden_size: Number of neurons in hidden layers
        output_size: Output dimension
    """
    
    def __init__(self, nlayer: int = 1, input_size: int = 128, hidden_size: int = 256, output_size: int = 1):
        super().__init__()
        
        # Input validation
        if nlayer < 1:
            raise ValueError("Number of layers must be positive")
        if hidden_size < 1 or input_size < 1 or output_size < 1:
            raise ValueError("Layer sizes must be positive")
        
        self.nlayer = nlayer
        self.input_size = input_size
        self.hidden_size = hidden_size
        self.output_size = output_size
        
        # Define LSTM layers
        self.lstms = nn.ModuleList()
        self.lstms.append(nn.LSTM(input_size, hidden_size))
        for _ in range(1, nlayer):
            self.lstms.append(nn.LSTM(hidden_size, hidden_size))
        
        self.fc = nn.Linear(hidden_size, output_size)

    def forward(self, x: torch.Tensor) -> torch.Tensor:
        """Forward pass through the network.
        
        Args:
            x: Input tensor of shape (seq_len, batch_size, input_size)
            
        Returns:
            Output tensor of shape (batch_size, output_size)
        """
        for lstm in self.lstms:
            x, _ = lstm(x)
        
        x = x[-1]  # Take the output of the last time step
        x = self.fc(x)        
        return x

    def __repr__(self) -> str:
        """Return string representation of the model."""
        return (
            f"VariableLSTM(nlayer={self.nlayer}, "
            f"input_size={self.input_size}, "
            f"hidden_size={self.hidden_size}, "
            f"output_size={self.output_size})"
        )


if __name__ == '__main__':
    data = torch.randn(10, 1, 128)
    model = VariableLSTM(nlayer=3, output_size=64)
    output = model(data)
    print(output.shape)