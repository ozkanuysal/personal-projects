import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import io
from datetime import datetime
from .minio import MinioService
from .notification import (NotificationService)


class ReportService:
    def __init__(self):
        """
        Initialize the ReportService with MinioService and NotificationService instances.
        """
        self.minio_service = MinioService(bucket_name="reports")
        self.notification_service = NotificationService()

    def save_plot_to_minio(self, plot_func, plot_name):
        """
        Save a plot generated by a function to MinIO.

        Parameters:
        plot_func (function): A function that generates a plot.
        plot_name (str): The name of the plot file.

        Returns:
        None
        """
        # Create a BytesIO buffer
        buffer = io.BytesIO()
        # Generate the plot
        plot_func()
        # Save the plot to the buffer
        plt.savefig(buffer, format='png')
        buffer.seek(0)
        # Define the object name based on current date and plot name
        date_str = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
        object_name = f'{date_str}/{plot_name}.png'
        # Upload the buffer to MinIO
        self.minio_service.upload_file(buffer, object_name)
        buffer.close()

    def plot_current_vs_next_month(self, result: pd.DataFrame):
        """
        Generate and save a scatterplot comparing purchase amounts between current and next month.

        Parameters:
        result (pd.DataFrame): A DataFrame containing purchase amounts for current and next month.

        Returns:
        None
        """
        def plot():
            # Scatterplot
            sns.scatterplot(data=result, x='purchase_amount', y='next_month_purchase_amount')
            plt.title('Current Month Purchase Amount vs Next Month Purchase Amount')
            plt.xlabel('Current Month Purchase Amount')
            plt.ylabel('Next Month Purchase Amount')
            plt.show()

        self.save_plot_to_minio(plot, 'current_vs_next_month')

    def plot_distribution(self, result: pd.DataFrame):
        """
        Generate and save histograms comparing purchase amounts distribution between current and next month.

        Parameters:
        result (pd.DataFrame): A DataFrame containing purchase amounts for current and next month.

        Returns:
        None
        """
        def plot():
            # Histogram for current month's purchase_amount
            sns.histplot(result['purchase_amount'], bins=30, color='blue', label='Current Month', kde=True)
            # Histogram for next month's purchase_amount
            sns.histplot(result['next_month_purchase_amount'], bins=30, color='red', label='Next Month', kde=True)
            plt.legend()
            plt.title('Distribution of Purchase Amounts')
            plt.xlabel('Purchase Amount')
            plt.ylabel('Frequency')
            plt.show()

        self.save_plot_to_minio(plot, 'distribution')

    def plot_boxplot(self, result: pd.DataFrame):
        """
        Generate and save a boxplot comparing purchase amounts between current and next month.

        Parameters:
        result (pd.DataFrame): A DataFrame containing purchase amounts for current and next month.

        Returns:
        None
        """
        def plot():
            # Melt the DataFrame to use in seaborn
            melted_result = result.melt(value_vars=['purchase_amount', 'next_month_purchase_amount'],
                                        var_name='Month', value_name='Amount')

            sns.boxplot(data=melted_result, x='Month', y='Amount')
            plt.title('Boxplot of Purchase Amounts for Current and Next Month')
            plt.xlabel('Month')
            plt.ylabel('Purchase Amount')
            plt.show()

        self.save_plot_to_minio(plot, 'boxplot')

    def execute_report_pipeline(self, data: pd.DataFrame):
        """
        Execute the report pipeline by generating and saving plots, and triggering notifications for high-value customers.

        Parameters:
        data (pd.DataFrame): A DataFrame containing purchase amounts for current and next month.

        Returns:
        None
        """
        # Generate and save reports
        self.plot_distribution(data)
        self.plot_current_vs_next_month(data)
        self.plot_boxplot(data)

        # Trigger notifications for customers with predicted amounts > $1000
        high_value_customers = data[data['next_month_purchase_amount'] > 1000]
        for _, row in high_value_customers.iterrows():
            self.notification_service.send_notifications(row['customer_id'], row['next_month_purchase_amount'])


report_service = ReportService()