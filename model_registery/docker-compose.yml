version: '3.8'

services:
  app:
    image: app
    build:
      context: .
      dockerfile: Dockerfile
    container_name: app
    environment:
      ENV_FOR_DYNACONF: "docker"
      REDIS_HOST: redis
      REDIS_PORT: 6379
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - minio
      - redis

  nginx:
    image: nginx:latest
    container_name: nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
    depends_on:
      - app

  postgres:
    image: postgres:13
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 30s
      timeout: 30s
      retries: 3

  minio:
    image: minio/minio:latest
    container_name: minio
    environment:
      MINIO_ROOT_USER: MINIO_USER
      MINIO_ROOT_PASSWORD: MINIO_PASSWORD
    command: server /data --console-address :9001
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - miniodata:/data

  postgres-exporter:
    image: wrouesnel/postgres_exporter
    container_name: postgres_exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://postgres:postgres@postgres:5432/postgres?sslmode=disable"
    ports:
      - "9187:9187"
    depends_on:
      - postgres

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus:/etc/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"

  celery_worker:
    image: app
    container_name: celery_worker
    command: celery -A src.app.crud.celery_app.celery_app worker --loglevel=info
    depends_on:
      - redis
    environment:
      REDIS_HOST: "redis"
      REDIS_PORT: "6379"
      ENV_FOR_DYNACONF: "docker"


  celery_beat:
    image: app
    container_name: celery_beat
    command: celery -A src.app.crud.celery_app.celery_app beat --loglevel=info
    depends_on:
      - redis
    environment:
      REDIS_HOST: "redis"
      REDIS_PORT: "6379"
      ENV_FOR_DYNACONF: "docker"

volumes:
  pgdata:
  miniodata:
  grafana_data: